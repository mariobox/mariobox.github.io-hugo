<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tech on Mario Sanchez Carrion</title>
    <link>http://www.mariosanchez.org/tags/tech/</link>
    <description>Recent content in Tech on Mario Sanchez Carrion</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 23 Dec 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://www.mariosanchez.org/tags/tech/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How To Create a Minimal Hugo Site</title>
      <link>http://www.mariosanchez.org/post/minimalhugo/</link>
      <pubDate>Wed, 23 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.mariosanchez.org/post/minimalhugo/</guid>
      <description>

&lt;p&gt;These are the instructions to create a minimal, functional Hugo site. For more information read the &lt;a href=&#34;http://gohugo.io/overview/introduction/&#34;&gt;Hugo Documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;download-hugo:ed927200c6ae8a82148fa4c8d182d7fd&#34;&gt;Download Hugo&lt;/h4&gt;

&lt;p&gt;You can download Hugo for many different platforms from the &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo site&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;copy-hugo-exe-on-a-working-folder:ed927200c6ae8a82148fa4c8d182d7fd&#34;&gt;Copy hugo.exe on a working folder&lt;/h4&gt;

&lt;p&gt;Create a folder (you can name it /projects/) under your root, and then navigate to that folder by typing&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd projects&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;create-a-new-hugo-site-in-a-subfolder-of-projects-called-projecthugo:ed927200c6ae8a82148fa4c8d182d7fd&#34;&gt;Create a new Hugo site in a subfolder of /projects called /projecthugo&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;hugo new site ~/projects/projecthugo/&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;go-to-your-hugo-site-folder:ed927200c6ae8a82148fa4c8d182d7fd&#34;&gt;Go to your Hugo site folder&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;cd projecthugo&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;list-the-contents-of-the-projecthugo-folder:ed927200c6ae8a82148fa4c8d182d7fd&#34;&gt;List the contents of the /projecthugo folder&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;ls&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should now see a skeleton with the basic structure of a Hugo site but no content or any of the folders or files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;archetypes  config.toml content layouts static data&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;install-hugo-in-your-path:ed927200c6ae8a82148fa4c8d182d7fd&#34;&gt;Install Hugo in your path.&lt;/h4&gt;

&lt;p&gt;Copy the hugo.exe into your /projecthugo folder.&lt;/p&gt;

&lt;p&gt;Do &lt;pre&gt;&lt;code&gt;ls&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;again and you should now see the hugo executable:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;archetypes  config.toml content layouts static data hugo.exe&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;create-some-posts:ed927200c6ae8a82148fa4c8d182d7fd&#34;&gt;Create some posts&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;hugo new post/post1.md&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open post1.md with your favorite text editor and you will see three fields already pre-written in the top section of the file, called &amp;ldquo;front matter&amp;rdquo; (between the +++ marks). By default, Hugo includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Title&lt;/li&gt;
&lt;li&gt;Date and&lt;/li&gt;
&lt;li&gt;Draft&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can add more parameters later (like Categories or Tags).&lt;/p&gt;

&lt;p&gt;Hugo will match the title of your post with your post file name, so if you want to call it something different just replace the text between quotes in the Title field in the front matter.&lt;/p&gt;

&lt;p&gt;Now you can write some content below the second +++ line (leave one or two lines blank at the beginning).&lt;/p&gt;

&lt;p&gt;If you want your post to go live remember to change &lt;pre&gt;&lt;code&gt;draft = true&lt;/pre&gt;&lt;/code&gt; for &lt;pre&gt;&lt;code&gt;draft = false&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;If you keep it as draft your post will not show on your site.&lt;/p&gt;

&lt;p&gt;Create another post called post2.md following a similar process.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;create-a-couple-of-pages-that-are-not-posts:ed927200c6ae8a82148fa4c8d182d7fd&#34;&gt;Create a couple of pages that are not posts&lt;/h3&gt;

&lt;p&gt;These would be pages like &lt;strong&gt;about&lt;/strong&gt; or &lt;strong&gt;contact&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new about.md&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new contact.md&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open your favorite text editor and create some content for about.md and contact.md&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;create-default-templates:ed927200c6ae8a82148fa4c8d182d7fd&#34;&gt;Create _default templates&lt;/h4&gt;

&lt;p&gt;You will create four templates and place them in a folder called /layouts/_default:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;single.html&lt;/li&gt;
&lt;li&gt;list.html&lt;/li&gt;
&lt;li&gt;summary.html&lt;/li&gt;

&lt;li&gt;&lt;p&gt;li.html&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Single is for your individual content (e.g. posts or pages)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;List is for a list of posts.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Summary and li are views that will be used in your list template, depending if you just want a list of posts titles or a summary of each post in addition to the title.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Hugo documentation provides instructions on what code to use in each of them.&lt;/p&gt;

&lt;p&gt;You can create section specific templates if your site is larger but for now _default templates are all we need.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;create-partial-templates:ed927200c6ae8a82148fa4c8d182d7fd&#34;&gt;Create partial templates&lt;/h4&gt;

&lt;p&gt;These are good for the common areas of your site. Go ahead and create:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;header.html (must include a link to the style sheet and the site&amp;rsquo;s navigation)&lt;/li&gt;
&lt;li&gt;footer.html (for copyright or similar info)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Place these templates in a folder called /layouts/partials/. These partial templates can be called from any other template (for example from single.hmtl or list.html) by simply using the following code within those templates:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ partial &#34;header.html&#34; . }}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ partial &#34;footer.html&#34; . }}&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;create-an-index-html-template:ed927200c6ae8a82148fa4c8d182d7fd&#34;&gt;Create an index.html template&lt;/h4&gt;

&lt;p&gt;This template is only used for the home page. Create it however you want your home page to look and place it in the root of the /layouts folder.  You can also choose to use a list of posts as your index page. In that case just save the list template as index.html&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;create-a-static-css-folder-and-upload-a-style-sheet:ed927200c6ae8a82148fa4c8d182d7fd&#34;&gt;Create a /static/css folder and upload a style sheet.&lt;/h4&gt;

&lt;p&gt;Don&amp;rsquo;t forget to link to the style sheet from the header.html partial template:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;link rel=&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;http://www.mariosanchez.org/css/style.css&#34;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You need to include the above code between &amp;lt;&amp;gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;create-a-static-images-folder-and-upload-some-images:ed927200c6ae8a82148fa4c8d182d7fd&#34;&gt;Create a /static/images folder and upload some images.&lt;/h4&gt;

&lt;p&gt;Self explanatory.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;update-your-config-toml-file:ed927200c6ae8a82148fa4c8d182d7fd&#34;&gt;Update your config.toml file&lt;/h4&gt;

&lt;p&gt;Just add the URL of your site and your site&amp;rsquo;s description. That&amp;rsquo;s all you&amp;rsquo;re going to need to start. You can add more parameters later.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;try-out-your-site:ed927200c6ae8a82148fa4c8d182d7fd&#34;&gt;Try out your site&lt;/h4&gt;

&lt;p&gt;Once you have created content and templates it&amp;rsquo;s time to view your site. Type the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo server -w&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If everything went well Hugo will generate your website and you will be able to see it at &lt;a href=&#34;http://localhost:1313&#34;&gt;http://localhost:1313&lt;/a&gt; .&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;get-your-site-ready-to-upload:ed927200c6ae8a82148fa4c8d182d7fd&#34;&gt;Get your site ready to upload&lt;/h4&gt;

&lt;p&gt;Once you&amp;rsquo;re satisfied with the way your site looks, run the hugo command by itself:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You are now ready to upload or git push your site to your web hosting service. Your site files will be in a folder called /public.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t want to start from scratch, I have created a Minimal Hugo Site and git pushed the &lt;a href=&#34;https://github.com/mariobox/MinimalHugoSite&#34;&gt;source code&lt;/a&gt; to Github.&lt;/p&gt;

&lt;p&gt;You can simply clone the repository by running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/mariobox/MinimalHugoSite.git&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Git Cheat Sheet</title>
      <link>http://www.mariosanchez.org/post/gcs/</link>
      <pubDate>Tue, 22 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.mariosanchez.org/post/gcs/</guid>
      <description>&lt;p&gt;I use Git to keep track of the changes I make to this site. I am not an expert on Git nor am I a programmer so I really won&amp;rsquo;t go into great depths here. The idea of this post is just to summarize for future reference the Git commands I use on a regular basis to keep this site up and running.&lt;/p&gt;

&lt;p&gt;Here we go:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global user.name &#34;your user name&#34;&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;git config --global user.email &#34;your email&#34;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tell Git your usename and email. You only need to do this once.&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;git config --list&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Prints a list all the options you have configured Git for, including your user.name and user.email.&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;git init&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Creates a Git repository in the current folder.&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;git clone /path/to/repository&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Clones (makes a working copy) of an existing repository. If the repository is in a host like &lt;a href=&#34;http://www.github.com&#34;&gt;Github&lt;/a&gt; the path to repository will typically be a URL like: &lt;a href=&#34;https://github.com/username/username.github.io.git&#34;&gt;https://github.com/username/username.github.io.git&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;git status -s&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Shows you the status of files in the current directory, in short notation. You will get one or two characters to the left of the file name:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;M: the file has been modified&lt;/li&gt;
&lt;li&gt;A: new file that has been added to the staging area&lt;/li&gt;
&lt;li&gt;MM: file that has been modified, staged, and modified again&lt;/li&gt;
&lt;li&gt;?: new file not yet tracked&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;git add file name&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add --all&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Adds a file, or all files that have been created or modified to the staging area.&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;git commit -m &#34;commit message&#34;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Commits (records) your changes to your local Git repository. Remember to write a short message between the quote marks so that others can understand what you did.&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;git push origin master&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pushes (uploads) your changes to your remote repository.&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;git pull origin master&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you&amp;rsquo;ve made changes to your remote repository that are not reflected in your local repository, this command will merge (copy) those changes to your local repository. This is very useful when you mess something up in your local and want your files to revert back to the state they were when they were last pushed to your remote.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Understanding Static Site Generators</title>
      <link>http://www.mariosanchez.org/post/ssg/</link>
      <pubDate>Fri, 03 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.mariosanchez.org/post/ssg/</guid>
      <description>&lt;p&gt;When I started building websites from scratch using plain HTML and CSS one of the hardest concepts for me to grasp was how a static site generator (SSG) worked.&lt;/p&gt;

&lt;p&gt;&lt;mark&gt;When you use a SSG, the HTML/CSS site is the end product. To get there, you need two other components: a) the source files, and b) the SSG itself&lt;/mark&gt;.&lt;/p&gt;

&lt;p&gt;The source files are the raw material, so to speak, and the SSG is the machine that processes it. Once the static site generator performs its magic, a website made entirely out of HTML, CSS and Javascript is created.&lt;/p&gt;

&lt;p&gt;In summary, you can&amp;rsquo;t just deploy the source files and expect the website to render in your browser. You have to run them through the SSG first.&lt;/p&gt;

&lt;p&gt;There are &lt;a href=&#34;http://www.staticsitegenerators.net&#34;&gt;hundreds&lt;/a&gt; of SSGs to choose from. Depending on the static site generator you choose, you may need to download other programs (or dependencies), like Python or Ruby, that are necessary for the SSG to work.&lt;/p&gt;

&lt;p&gt;Now, back to the source files. There are two kinds of source files: content files and templates. The content files are your blog posts and pages, which can be written in &lt;a href=&#34;http://daringfireball.net/projects/markdown/&#34;&gt;Markdown&lt;/a&gt;. The templates determine the way your content is displayed, and are written in a combination of HTML and the programming language your SSG is written on.&lt;/p&gt;

&lt;p&gt;Templates are great because they enable the SSG to automatically update all common elements of your site (headers, footers and menus), generate a post list, and add any new post to that list.&lt;/p&gt;

&lt;p&gt;Once you run the SSG, it places the static site&amp;rsquo;s files in a special folder. Depending on the SSG you are using, this special folder may be called /_site or /public or something else.&lt;/p&gt;

&lt;p&gt;Additionally, you can command your SSG to &amp;ldquo;serve&amp;rdquo; the site in your local environment (that would be your computer or laptop). To see the result, you need to open your browser and type &amp;ldquo;localhost:xxxx&amp;rdquo;, where &amp;ldquo;xxxx&amp;rdquo; is a four digit number determined by the SSG you are using.&lt;/p&gt;

&lt;p&gt;Everything we&amp;rsquo;ve talked about so far takes place in your computer or laptop. After that, you need to deploy your site to the web by uploading your static files to a web host like Amazon, Dropbox, Github Pages or other (each of them will give you detailed instructions on how to do it).&lt;/p&gt;

&lt;p&gt;If you are deep into digital self-reliance, you may choose to deploy your site to a VPS (virtual private server). You will first need to install the SSG (plus the programs that enable it) on your VPS. You can then upload the source files, run the SSG, and if you&amp;rsquo;ve done everything right your newly created static site should then be live on the web.&lt;/p&gt;

&lt;p&gt;In order to use a SSG you will need to learn, at a bare minimum, the basics of HTML and CSS, a few key Linux-style commands, how to write in Markdown, and have access to a Linux-style terminal emulator.&lt;/p&gt;

&lt;p&gt;For this site, I am currently using a SSG called &lt;a href=&#34;http://www.gohugo.io&#34;&gt;Hugo&lt;/a&gt;. It is lightning fast and doesn&amp;rsquo;t require you to download any program other than the Hugo executable. Since I&amp;rsquo;m working in a Windows box, I use a terminal emulator called &lt;a href=&#34;https://msysgit.github.io/&#34;&gt;Git Bash&lt;/a&gt;. I am deploying the resulting static files in &lt;a href=&#34;https://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt; using &lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt; for version control and to push (upload) my site to Github Page&amp;rsquo;s server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Read &lt;a href=&#34;http://davidwalsh.name/introduction-static-site-generators&#34;&gt;this article&lt;/a&gt; for a more comprehensive explanation of how static site generators work.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Evolution Of My Digital Presence</title>
      <link>http://www.mariosanchez.org/post/digital-presence/</link>
      <pubDate>Thu, 19 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.mariosanchez.org/post/digital-presence/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve always been fascinated by the Internet. The idea of having a publishing platform capable of instantly reaching anybody in the world, with no gatekeepers, for free, is still mind boggling to me. Today, of course, everybody has a digital presence, although for most people that means a profile in one or more of the ubiquitous social networks that have taken the Internet by storm.&lt;/p&gt;

&lt;p&gt;When I talk about a having a digital presence, though, I&amp;rsquo;m not talking about being a tenant in Zuck&amp;rsquo;s massive apartment complex, but rather of building and owning our own digital home: a website that we can deploy using our own domain, custom-designed and tweaked to our liking.&lt;/p&gt;

&lt;h3 id=&#34;the-early-days&#34;&gt;The Early Days&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ve had a digital presence through self-deployed websites (mainly as a hobby) since the early 2000&amp;rsquo;s. I started off by learning some basic HTML tags and hastily coding a website that I used to publish notes-to-self about search engine optimization, a topic I was deeply interested in back then. Then, Web 2.0 came along.&lt;/p&gt;

&lt;h3 id=&#34;the-wordpress-days&#34;&gt;The Wordpress Days&lt;/h3&gt;

&lt;p&gt;Web 2.0 brought us content management systems (CMS) like Wordpress, with their arsenal of plug-ins, customization options and interactive features. I was curious, so around 2008 I created a self-hosted Wordpress blog where I posted short musings about branding.&lt;/p&gt;

&lt;p&gt;It didn&amp;rsquo;t take me long to figure out that Wordpress was overkill for what I really needed: a simple personal blog with no bells and whistles. That&amp;rsquo;s when I discovered &lt;a href=&#34;http://en.wikipedia.org/wiki/Posterous&#34;&gt;Posterous&lt;/a&gt;. Good things don&amp;rsquo;t last forever, though, and a short time later Posterous sold out to Twitter and closed down. I had to take my posts and move back to Wordpress, learning a valuable lesson in the process: never host your website in somebody else&amp;rsquo;s platform.&lt;/p&gt;

&lt;p&gt;By that time, however, Wordpress had lost its luster. Its notorious security vulnerabilities meant that I was spending less time writing, and more time weeding out blog comment spam and upgrading to newer versions of the software. Not fun. The straw that broke the camel&amp;rsquo;s back was when someone hacked into my account and started sending mass email spam. I immediately deleted my blog and removed the WP installation from my hosting account.&lt;/p&gt;

&lt;h3 id=&#34;back-to-the-future-static-sites-make-a-comeback&#34;&gt;Back To The Future: Static Sites Make a Comeback&lt;/h3&gt;

&lt;p&gt;A few months after I obliterated my Wordpress site, I ran into a web design tutorial written by &lt;a href=&#34;http://www.evbogue.com&#34;&gt;Ev Bogue&lt;/a&gt; that re-acquainted me with the basics of creating web pages, and introduced me to the newer, much simpler iterations of HTML and CSS: HTML5 and CSS3. I got excited and decided to create a website from scratch, like in the early days. I diligently followed the instructions in the tutorial, tweaked a bit the basic style sheet and framework that Ev suggested, and a few days later my new plain vanilla HTML personal site was up.&lt;/p&gt;

&lt;p&gt;While it felt great to finally have a site I could control, the problems were obvious: a hand-coded HTML site with no programming involved requires that you create and update each page individually. If you ever want to change, say, the footer or the navigation menu, you have to do it in every single page. If your site has only three or four pages it&amp;rsquo;s not such a big deal, but if you start adding posts and your site grows it can become a real issue. There had to be a better way, and that way is to use a &lt;a href=&#34;http://www.mattweldon.com/static-websites-have-made-a-comeback/&#34;&gt;static site generator&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;blogging-like-a-hacker-static-site-generators&#34;&gt;Blogging Like A Hacker: Static Site Generators&lt;/h3&gt;

&lt;p&gt;A &lt;a href=&#34;../ssg/&#34;&gt;static site generator&lt;/a&gt; is basically a program that takes your content, merges it with predefined templates and style sheets, and generates a site made of just HTML files. Depending on how you configure it, the program can create a blog post list for you, add new posts to that list, and update all your pages automatically when you make changes to the common elements of the site (navigation menu, footer, or sidebar).&lt;/p&gt;

&lt;p&gt;While using a static site generator is extremely easy, setting one up can be a royal pain for non-programmers like me. I definitely wanted to go this route, though, so I focused on acquiring the skills and tools to make it happen. The process took some time, some sweat equity, quite a bit of reading and plenty of trial and error, but in the end I succeded.&lt;/p&gt;

&lt;p&gt;The first static site generator I used was &lt;a href=&#34;http://www.jekyllrb.com&#34;&gt;Jekyll&lt;/a&gt;. After a few months, though, I started to find Jekyll somehow limiting (it&amp;rsquo;s a fairly old SSG), so I gave &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; a try and have been using it ever since. I am extremely happy with Hugo: it is fast, intuitive, and just needs one executable file to run (no complicated dependencies).&lt;/p&gt;

&lt;h3 id=&#34;the-tools-of-the-trade&#34;&gt;The Tools of the Trade&lt;/h3&gt;

&lt;p&gt;In order to run my site using a static site generator I had to learn a few things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://daringfireball.net/projects/markdown/&#34;&gt;Markdown&lt;/a&gt; to write blog posts and content in general (easy);&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.htmlandcssbook.com/&#34;&gt;HTML and CSS&lt;/a&gt; to tweak the look and feel of the site (HTML is fairly easy; CSS is a little harder);&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://git-scm.com/book/en/v2&#34;&gt;Git&lt;/a&gt; to record changes to the site and communicate with my web hosting server (hard to wrap your head around the concept, but not that difficult once you &amp;ldquo;get it&amp;rdquo;); and&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cli.learncodethehardway.org/bash_cheat_sheet.pdf&#34;&gt;Linux-style command line essentials&lt;/a&gt; to install the required software and to move quickly around my hard drive folders (easy).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Aside from that, I had to download the following programs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://git-scm.com/download/win&#34;&gt;Git for Windows&lt;/a&gt; to version control my site and access a command line emmulator called Git Bash; and&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; executable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, I opened an account with &lt;a href=&#34;http://www.github.com&#34;&gt;Github&lt;/a&gt; to create the &lt;a href=&#34;https://github.com/mariobox/mariobox.github.io&#34;&gt;site&amp;rsquo;s remote repository&lt;/a&gt; where I version-control the site&amp;rsquo;s source files, and another repository to version and host the site&amp;rsquo;s public files (those that get served to the web by Github pages to render the site in the browser).&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m extremely happy with this set-up, and for the time being it is all I need: a simple way to generate, update and deploy a minimalistic personal website at $0 cost.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How To Use Gmail With Your Own Domain</title>
      <link>http://www.mariosanchez.org/post/gmail/</link>
      <pubDate>Wed, 24 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://www.mariosanchez.org/post/gmail/</guid>
      <description>&lt;p&gt;Many people, including me, use Gmail as their default email client. With Gmail, you can send email from (and receive email at) your own branded domain. For example, instead of using &lt;em&gt;yourname@gmail.com&lt;/em&gt; you can use &lt;em&gt;you@yourname.com&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It is not hard to set this up. It just takes a few steps that I will describe below:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Go to any domain registrar (like Godaddy or Namecheap) and register the domain name you want to use.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Then, in your control panel you should be able to find the &lt;strong&gt;Email Forwarding&lt;/strong&gt; feature.  This is where you will create your new &lt;em&gt;you@yourname.com&lt;/em&gt; email address and forward it to &lt;em&gt;yourname@gmail.com&lt;/em&gt;. Note: if you&amp;rsquo;re using Godaddy, &lt;a href=&#34;http://help.godaddy.com/article/1725&#34;&gt;this page&lt;/a&gt; will give you more details on how to do this.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;After you&amp;rsquo;ve done that, log on to Gmail, click on &lt;strong&gt;Settings&lt;/strong&gt; &amp;gt; &lt;strong&gt;Accounts&lt;/strong&gt; &amp;gt; &lt;strong&gt;Add Another Email Address&lt;/strong&gt;, and add &lt;em&gt;you@yourname.com&lt;/em&gt; to the list.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click NEXT, and Google will now send you a message to &lt;em&gt;you@yourname.com&lt;/em&gt; so you can verify it&amp;rsquo;s yours. Here&amp;rsquo;s the trick: since you already set up email forwarding in step 2 you will receive this email at &lt;em&gt;yourname@gmail.com&lt;/em&gt; ;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click on the verification link and then go back to Gmail&amp;rsquo;s &lt;strong&gt;Accounts&lt;/strong&gt; tab in the &lt;strong&gt;Settings&lt;/strong&gt; menu. Your new, branded email address should already be listed there. Click on the link that says &amp;ldquo;make default&amp;rdquo; next to it, and check the radio button next to &amp;ldquo;always reply from my default address&amp;rdquo;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That&amp;rsquo;s it. You should now be ready to use Gmail with your own branded email address. If you want more details, you can visit Gmail&amp;rsquo;s custom domain &lt;a href=&#34;http://mail.google.com/support/bin/answer.py?hl=en&amp;amp;amp;ctx=mail&amp;amp;amp;answer=22370&#34;&gt;help page&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>